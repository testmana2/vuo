#!/bin/bash

set -e

VUO_RUN_DIR=$(dirname $0)
if [ -x 'framework/vuo-compile' ]; then
	VUO_FRAMEWORK_PATH='framework'
elif [ -x '../framework/vuo-compile' ]; then
	VUO_FRAMEWORK_PATH='../framework'
elif [ -x '../../framework/vuo-compile' ]; then
	VUO_FRAMEWORK_PATH='../../framework'
elif [ -x '../../../framework/vuo-compile' ]; then
	VUO_FRAMEWORK_PATH='../../../framework'
elif [ -x "$VUO_RUN_DIR/vuo-compile" ]; then
	VUO_FRAMEWORK_PATH="$VUO_RUN_DIR"
else
	echo "Error: Couldn't find vuo-compile."
	exit
fi

for filename do
	COMPOSITION_WITHOUT_EXTENSION="${filename/.vuo/}"
	COMPOSITION_BASENAME="$(basename "$COMPOSITION_WITHOUT_EXTENSION")"

	if [ ! -f "$COMPOSITION_WITHOUT_EXTENSION.vuo" ]; then
		echo "Error: $COMPOSITION_WITHOUT_EXTENSION.vuo: Composition not found"
		exit 1
	fi

	COMPOSITION_COMPILED="/tmp/$COMPOSITION_BASENAME.bc"
	$VUO_FRAMEWORK_PATH/vuo-compile "$COMPOSITION_WITHOUT_EXTENSION.vuo" --output="$COMPOSITION_COMPILED"
	if [ ! -f "$COMPOSITION_COMPILED" ]; then
		echo "Error: $COMPOSITION_WITHOUT_EXTENSION.vuo: Compilation failed"
		exit 1
	fi
	
	COMPOSITION_LINKED="/tmp/$COMPOSITION_BASENAME"
	# During development, small-binary is typically faster since it doesn't need to wait for _everything_ to be linked.
	$VUO_FRAMEWORK_PATH/vuo-link --optimization small-binary "$COMPOSITION_COMPILED" --output="$COMPOSITION_LINKED"
#	$VUO_FRAMEWORK_PATH/vuo-link --optimization fast-build "$COMPOSITION_COMPILED" --output="$COMPOSITION_LINKED"
	if [ ! -f "$COMPOSITION_LINKED" ]; then
		echo "Error: $COMPOSITION_WITHOUT_EXTENSION.vuo: Linking failed"
		exit 1
	fi

	pushd . > /dev/null
	cd "$(dirname "$1")"
	"$COMPOSITION_LINKED"
	popd > /dev/null
done
